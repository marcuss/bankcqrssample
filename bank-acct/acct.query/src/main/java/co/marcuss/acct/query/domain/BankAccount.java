package co.marcuss.acct.query.domain;

import co.marcuss.acct.commons.dto.AccountType;
import co.marcuss.cqrs.core.domain.BaseEntity;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.Id;
import java.math.BigDecimal;
import java.time.LocalDate;

/**
 * DO NOT USE LOMBOK FOR ENTITY CLASSES EQUALS AND HASHCODE
 * The implementation of the equals() and hashCode() methods for Hibernate entities is an often discussed topic that provides an
 * interesting, technical challenge.
 * You need to properly override Objectâ€™s default implementations, if you work with multiple Hibernate Sessions or with detached entities.
 * Only if you are working with single sessions and no autogenerated keys you can use the default implementation and expect it works
 * perfectly fine.
 *
 * You need to make sure that your code fulfills the contracts defined by the Java language and that the hash code of your objects
 * doesn't change when the entity gets persisted, meaning that detached entities can not trust their @id for their hashcode, in general
 * is a bad idea to use a fixed hash code since huge maps or set can get a performance decrease, but also in general you should not work
 * with huge entity collections, and the solution for that is to use a fixed hashcode per entity, thus
 * <code>getClass().getSimpleName().hashCode();</code>
 * it's a pretty good implementation in this case.
 * */
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@SuppressWarnings("unused")
public class BankAccount extends BaseEntity {
    @Id
    private String id;
    private String accountHolder;
    private LocalDate creationDate;
    private AccountType accountType;
    private BigDecimal balance;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getAccountHolder() {
        return accountHolder;
    }

    public void setAccountHolder(String accountHolder) {
        this.accountHolder = accountHolder;
    }

    public LocalDate getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDate creationDate) {
        this.creationDate = creationDate;
    }

    public AccountType getAccountType() {
        return accountType;
    }

    public void setAccountType(AccountType accountType) {
        this.accountType = accountType;
    }

    public BigDecimal getBalance() {
        return balance;
    }

    public void setBalance(BigDecimal balance) {
        this.balance = balance;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BankAccount that = (BankAccount) o;
        return getId().equals(that.getId());
    }

    @Override
    public int hashCode() {
        return getClass().getSimpleName().hashCode();
    }
}
